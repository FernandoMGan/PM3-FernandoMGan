[
    {
        "PlanEstudio": "Plan de Estudio (Nuevo)",
        "Modulo": "M3",
        "Lecture": "TypeScript",
        "Notas": [
            {
                "NodeType": "00",
                "Data": {
                    "NodeDesc": "Notas de Estudio de Fernando Gan"
                }
            },
            {
                "NodeType": "01",
                "Data": {
                    "NodeDesc": "Introduccion"
                }
            },
            {
                "NodeType": "02",
                "Data": {
                    "NodeDesc": "Proyecto del Modulo"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Proyecto del Modulo"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "Te presentamos el proyecto M3",
                    "NodeSubDesc": "Como ya sabes, a lo largo de cada m√≥dulo desarrollar√°s un proyecto clase a clase agregando nuevas features y tecnolog√≠as a medida que las veas en clase. En el siguiente video, ¬°Jorge te presentar√° una DEMO del proyecto que desarrollar√°s!"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Inicio"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "Introducci√≥n",
                    "NodeSubDesc": "Nuevo m√≥dulo, nuevo lenguaje. ¬°Bienvenido al m√≥dulo 3! En esta clase comenzaremos a asentar nuestras bases en un lenguaje similar a JavaScript, pero a su vez muy diferente. Veamos esto en el siguiente video."
                }
            },
            {
                "NodeType": "05",
                "Data": {
                    "VideoTitle": "Video Introduccion a TypeScript",
                    "VideoName": "",
                    "VideoPath": ""
                }
            },
            {
                "NodeType": "02",
                "Data": {
                    "NodeDesc": "Revisemos cuales son los objetivos de esta clase"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "01 - Comprender los conceptos b√°sicos de TypeScript."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "02 - Conocer c√≥mo generar un entorno de desarrollo en TypeScript."
                }
            },

            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "03 - Familiarizarse con la sintaxis b√°sica de TypeScript."
                }
            },

            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "04 - Entender la tipificaci√≥n est√°tica y sus beneficios."
                }
            },
            {
                "NodeType": "01",
                "Data": {
                    "NodeDesc": "Desarrollo"
                }
            },
            {
                "NodeType": "02",
                "Data": {
                    "NodeDesc": "TypeScript"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "TypeScript"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Introducci√≥nTypeScript es un lenguaje de programaci√≥n de c√≥digo abierto fuertemente tipado que act√∫a como una extensi√≥n de JavaScript. En otras palabras, es JavaScript con esteroides."
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "¬øFuertemente tipado?",
                    "NodeSubDesc": "Pero, ¬øQu√© significa que sea un lenguaje 'fuertemente tipado'? Recordemos que dentro de las caracter√≠sticas b√°sicas de JavaScript, se menciona que es un lenguaje de programaci√≥n "d√©bilmente tipado". Esto significa que las variables declaradas en JavaScript pueden cambiar de tipo de dato durante la ejecuci√≥n de un programa."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Por ejemplo, podr√≠amos definir una variable x que sea inicializada con un valor num√©rico, y en alg√∫n otro lugar del c√≥digo decidir cambiarla a un string."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },

            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "En TypeScript esto no ser√≠a posible ya que el tipo de dato es est√°tico, lo que significa que est√° asociado a la variable en el momento de su creaci√≥n y no permite que sea modificado nunca m√°s, y el tratar de modificarlo conllevar√° a un error."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "¬øPor qu√© utilizar Typescript?",
                    "NodeSubDesc": "En realidad, TypeScript nos da las mismas funcionalidades de JavaScript, pero con una capa extra de seguridad gracias a su sistema de tipado. Por esto se dice que son lenguajes ‚Äúprimos‚Äù. Esto quiere decir que podemos trabajar c√≥digo tal como lo har√≠amos con JavaScript, pero con la ventaja de que podemos supervisar la consistencia en los tipos de datos utilizados para prevenir comportamientos inesperados en el c√≥digo o bugs."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },

            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Consideremos el siguiente caso. Imagina que dentro de un archivo index.js t√≠pico existe una funci√≥n que utiliza como argumento un string para imprimir algo en consola. Al trabajar con JavaScript estamos asumiendo que efectivamente ese argumento recibido ser√° siempre un string."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "En el mejor escenario esto va a funcionar sin problemas pero, ¬øqu√© ocurre si en lugar de recibir un string la funci√≥n recibe un n√∫mero, un array o un objeto?:"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "En efecto, obtenemos un error dado que el m√©todo toUpperCase solo est√° definido para strings. Este tipo de errores son m√°s frecuentes de lo que creemos. "
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "üëÄ Ejemplo real Cuando recibimos informaci√≥n de una API asumimos que la informaci√≥n vendr√° de determinada manera, pero muchas veces viene con otro formato. Estos errores ser√≠an detectados √∫nicamente al momento de ejecutar el c√≥digo. TypeScript nos permite ahorrarnos estos errores."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Este lenguaje hace una verificaci√≥n en tiempo de compilaci√≥n, ayud√°ndonos a detectar errores mientras escribimos el c√≥digo y no al ejecutarlo."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Continuando con el ejemplo anterior, vamos a hacer una prueba de esto. Primero cambiaremos la extensi√≥n del archivo de index.js a index.ts. Luego vamos a agregarle a la variable user el tipado (user: string). Al hacer esto nos daremos cuenta que inmediatamente podemos ver los errores en la funci√≥n sayHello() con los distintos argumentos."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Adem√°s de brindarnos informaci√≥n sobre los errores de forma r√°pida, TypeScript incluye una herramienta nativa de autocompletado de funciones en el editor de texto, lo que lo vuelve m√°s preciso dando opciones compatibles con el tipo de dato asociado."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Es necesario hacer la observaci√≥n de que los entornos de ejecuci√≥n como node o los navegadores web no tienen ni idea de qu√© es TypeScript ni su sintaxis para tipar est√°ticamente, pues solo trabajan con JavaScript. Si intentamos ejecutar el archivo index.ts con node recibiremos errores..."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Para poder ejecutar este script es necesario que sea previamente compilado (traducido) a JavaScript. Para esto debemos realizar algunas configuraciones en nuestro programa. A continuaci√≥n exploraremos de qu√© se trata esto."
                }
            },

            {
                "NodeType": "02",
                "Data": {
                    "NodeDesc": "Configuraci√≥n de entorno"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Configuraci√≥n de entorno"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "Configuraci√≥n inicial de entorno",
                    "NodeSubDesc": "Para poder utilizar TypeScript es necesario instalarlo dentro de nuestro proyecto o de forma global en nuestra computadora. Esto lo podemos hacer con estos comandos..."
                }
            },

            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Con este comando podr√°s instalar TypeScript de forma global en tu computadora y utilizarlo sin problemas en cualquier proyecto."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Este comando crear√° autom√°ticamente un proyecto local de node con todas las dependencias de este lenguaje ya instaladas."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Te recomendamos que NO instales TypeScript globalmente, ya que puede traer problemas de compatibilidad de versiones m√°s adelante."
                }
            },


            {
                "NodeType": "03",
                "Data": {
                    "ImgPath": "xx"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Una vez hecho esto, podremos compilar el c√≥digo TS a JS utilizando el comando npx tsc index.ts. Al hacerlo, nos daremos cuenta que dentro de nuestro proyecto se crea un archivo de .js. ¬°Es un archivo de JavaScript b√°sico!"
                }
            },
            {
                "NodeType": "05",
                "Data": {
                    "VideoTitle": "Video Introduccion a TypeScript",
                    "VideoName": "",
                    "VideoPath": ""
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "ESLint",
                    "NodeSubDesc": "Antes de empezar con las bases de TypeScript vamos a aprender a c√≥mo configurar un 'analizador de c√≥digo'. Por analizador de c√≥digo nos referimos a una herramienta que permite al lenguaje detectar e informar los errores conforme se escriben l√≠neas de c√≥digo. Si bien el an√°lisis proporcionado nos permite trabajar en la mayor√≠a de casos, hay ocasiones en las que las necesidades del proyecto requieren opciones m√°s personalizables y de mayor alcance. Para ello, haremos uso de ESLint. ESLint es una herramienta para an√°lisis de c√≥digo de JavaScript, puede ser implementada con TypeScript mediante la adici√≥n de algunos plugins con caracter√≠sticas espec√≠ficas. Para incorporarlo a nuestro proyecto, es necesario instalar dependencias que ser√°n utilizadas durante el proceso de desarrollo, a trav√©s del comando‚Ä¶"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "xx"
                }
            },


            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "De esta forma podemos utilizar a ESLint para analizar y darle formato al c√≥digo, aunque debemos hacer algunas configuraciones. En primera instancia, hay que crear un archivo de configuraci√≥n llamado .eslintrc.js (n√≥tese el punto del inicio) entro del cual configuraremos los plugins necesarios."
                }
            },

            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "xx"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "xx"
                }
            },

            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Por √∫ltimo, solo tendr√°s que asignar en el package.json un nuevo script llamado lint con el valor de la imagen. Profundicemos esto en el siguiente video...."
                }
            },
            {
                "NodeType": "05",
                "Data": {
                    "VideoTitle": "EsLint",
                    "VideoName": "",
                    "VideoPath": ""
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "¬°Ahora s√≠! Estamos listos para aprender los fundamentos de TypeScript."
                }
            },
            {
                "NodeType": "02",
                "Data": {
                    "NodeDesc": "Tipos de datos"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Tipos de datos"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "Tipos de datos",
                    "NodeSubDesc": "Comenzaremos con los tipos de datos primitivos en TypeScript. El tipado para las variables que contienen estos datos, no necesariamente deben definirse de forma manual, puesto que este lenguaje puede inferir el tipo de forma autom√°tica. Veamos esto en el siguiente video..."
                }
            },
            {
                "NodeType": "05",
                "Data": {
                    "VideoTitle": "Tipos de Datos",
                    "VideoName": "",
                    "VideoPath": ""
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Este es un buen ejemplo de cu√°ndo utilizar la asignaci√≥n de tipos. En la pr√°ctica se hace una combinaci√≥n de la asignaci√≥n e inferencia de datos para generar c√≥digo m√°s legible y al mismo tiempo seguro. Veremos m√°s casos de uso conforme avancemos con las clases."
                }
            },


            {
                "NodeType": "01",
                "Data": {
                    "NodeDesc": "Cierre"
                }
            },
            {
                "NodeType": "02",
                "Data": {
                    "NodeDesc": "Cierre"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "Cierre"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "En conclusi√≥n...",
                    "NodeSubDesc": "En esta clase aprendimos un nuevo lenguaje: TypeScript. Vimos cu√°les son las ventajas de hacer c√≥digo utilizando el tipado est√°tico y c√≥mo configurar nuestro entorno de desarrollo para que nuestros proyectos puedan ser m√°s seguros. Descubrimos que TypeScript provee una especie de "asistente de desarrollo" que est√° al tanto de nuestros posibles errores al momento de escribir c√≥digo, compilando nuestros scripts con extensi√≥n .ts en archivos .js tradicionales. Finalmente, conocimos de qu√© manera hacer uso de los tipos de datos primitivos, as√≠ como a determinar en qu√© situaciones es beneficioso realizar el tipado est√°tico manualmente y cu√°ndo dejar que este sea inferido."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "xx"
                }
            },
            {
                "NodeType": "02",
                "Data": {
                    "NodeDesc": "HomeWork"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "HomeWork"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "En esta lecci√≥n encontrar√°s una introducci√≥n al proyecto/homework que deber√°s desarrollar hoy. Mira el siguiente video con atenci√≥n y luego sigue las consignas. ¬°Buena suerte!üçÄ "
                }
            },
            {
                "NodeType": "05",
                "Data": {
                    "VideoTitle": "Hitos del Proyecto",
                    "VideoName": "",
                    "VideoPath": ""
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "INSTRUCCIONES...",
                    "NodeSubDesc": "Habilidades y competencias que desarrollar√°s... \n Planificaci√≥n de estructura de proyecto Full Stack.  \n Planificaci√≥n de estructura de base de datos."
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "ACTIVIDAD 1"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "PUNTOS A TENER EN CUENTA",
                    "NodeSubDesc": "¬°Bienvenidos al Proyecto Integrador del m√≥dulo 3! \n Notar√°s que este proyecto ser√° mucho m√°s robusto y desafiante que los anteriores, por lo cual ser√° clave m√°s que nunca contar con una correcta PLANIFICACI√ìN.  \n Para iniciar, pasamos en limpio lo que queremos lograr: una aplicaci√≥n para la gesti√≥n de turnos. El usuario deber√° poder, interactuando con el FrontEnd, agendar su turno en una fecha y hora determinados para asistir a ser atendido a un determinado lugar.  \n Para encarar este proyecto partiremos de algunas pautas y simplificaciones:  \n T√∫ decides de qu√© lugar se trata: un banco, una peluquer√≠a, un restaurant, un consultorio m√©dico, etc. Tendr√°s libertad para esta elecci√≥n y luego la tem√°tica deber√° verse reflejada en el dise√±o de tu aplicaci√≥n de Frontend.  \n Un usuario siempre debe estar autenticado para poder reservar un turno. No se agendar√° turnos a an√≥nimos o invitados.  \n Los turnos deber√°n ser agendados siempre dentro del horario de atenci√≥n del establecimiento, el cual tambi√©n estar√° en tus manos decidir cu√°l es. Tambi√©n deber√°s tener en cuenta los fines de semana como d√≠as no laborables.  \n Asumimos que el establecimiento cuenta con ‚Äúinfinitos‚Äù recursos para atender a sus clientes. Es decir, si 10, 20, 50 o 100 usuarios agendaron un turno para las 10:00hs del d√≠a 11/12/24, asumimos que el lugar cuenta con capacidad para poder atenderlos a todos al mismo tiempo en este horario.  \n Los turnos reservados por los usuarios pueden ser cancelados hasta el d√≠a anterior al d√≠a de la reserva. No implementaremos la funci√≥n de reprogramar. "
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "Asimismo, definiremos una serie de EXTRA-CREDITS, los cuales podr√°s incluir en tu proyecto en las cantidades y tiempos que est√©n dentro de tus posibilidades:",
                    "NodeSubDesc": "Env√≠o de confirmaci√≥n v√≠a email al usuario luego de reservar un turno o cancelarlo. Posibilidad de que el usuario ‚Äúsuba‚Äù una foto perfil a su cuenta a trav√©s de un archivo de imagen (.jpg, .png, etc). "
                }
            },


            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "ACTIVIDAD 2"
                }
            },
            {
                "NodeType": "03",
                "Data": {
                    "NodeDesc": "ACTIVIDAD"
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "Ahora que tenemos estas pautas sobre la mesa, pasemos a la actividad del d√≠a: ¬°a planificar!",
                    "NodeSubDesc": "Redactar las ‚Äúuser stories‚Äù de tu proyecto. En el video que acompa√±a a esta consigna te explicamos qu√© son estos puntos y algunas estrategias para desarrollarlos. \n Define un primer esquema de tu base de datos. Probablemente luego encuentres que hay cosas que modificar o mejorar, pero al menos establece un punto de partida: entidades involucradas, relaci√≥n entre las entidades, atributos que queremos describir y, muy importante, los tipos de datos de cada atributo. "
                }
            },
            {
                "NodeType": "04",
                "Data": {
                    "NodeDesc": "[REQUISITOS]:",
                    "NodeSubDesc": "Haber redactado las historias de usuario para la aplicaci√≥n de gesti√≥n de turnos que vamos a desarrollar. Haber planteado la estructura de entidades y atributos para la aplicaci√≥n. La misma debe contar con al menos las siguientes entidades: Usuarios, Turnos y Credenciales (usuario y contrase√±a de cada usuario)."
                }
            }

        ]
    }
]